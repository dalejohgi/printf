.TH PRINTF 3 17-3-2020 GNU "Linux Programmer's Manual"
.SH NAME
printf
.SH SYNOPSIS
#include <stdio.h>

int printf(const char *format, ...);
.SH DESCRIPTION
The functions in the printf() family produce output according to a for
mat as described below.  The functions  printf()  and  vprintf()  write
output  to stdout, the standard output stream;
.PP This function  write the output under the control of a format
string that specifies how subsequent arguments (or  arguments  accessed
via the variable-length argument facilities of stdarg(3)) are converted
for output.
.SH		Return value
Upon successful return, these functions return the number of characters
printed (excluding the null byte used to end output to strings).
.PP If an output error is encountered, a negative value is returned.
.SH   	     Format of the format string
The  format  string  is a character string, beginning and ending in its
initial shift state, if any.  The format string is composed of zero  or
more   directives:  ordinary  characters  (not  %),  which  are  copied
unchanged to the output stream; and conversion specifications, each  of
which results in fetching zero or more subsequent arguments.  Each con
version specification is introduced by the character %, and ends with a
conversion  specifier.  In between there may be (in this order) zero or
more flags, an optional minimum field width, an optional precision  and
an optional length modifier.
.PP The  format  string  is a character string, beginning and ending in its
initial shift state, if any.  The format string is composed of zero  or
more   directives:  ordinary  characters  (not  %),  which  are  copied
unchanged to the output stream; and conversion specifications, each  of
which results in fetching zero or more subsequent arguments.  Each con‐
version specification is introduced by the character %, and ends with a
conversion  specifier.  In between there may be (in this order) zero or
more flags, an optional minimum field width, an optional precision  and
an optional length modifier.
.PP The  arguments must correspond properly (after type promotion) with the
conversion specifier.  By default, the arguments are used in the  order
given,  where  each '*' and each conversion specifier asks for the next
argument (and it is an  error  if  insufficiently  many  arguments  are
given).   One  can  also specify explicitly which argument is taken, at
each place where an argument is required, by writing "%m$"  instead  of
'%'  and  "*m$" instead of '*', where the decimal integer m denotes the
position in the argument list of the desired argument, indexed starting
from 1.  Thus,

				printf("%*d", width, num);

and

				printf("%2$*1$d", width, num);

are  equivalent.   The  second  style allows repeated references to the
same argument.  The C99 standard does not include the style using  '$',
which comes from the Single UNIX Specification.  If the style using '$'
is used, it must be used throughout for all conversions taking an argu‐
ment  and  all  width and precision arguments, but it may be mixed with
"%%" formats which do not consume an argument.  There may be no gaps in
the numbers of arguments specified using '$'; for example, if arguments
1 and 3 are specified, argument 2 must also be specified  somewhere  in
the format string.

For  some  numeric  conversions  a radix character ("decimal point") or
thousands' grouping character  is  used.   The  actual  character  used
depends  on  the  LC_NUMERIC part of the locale.  The POSIX locale uses
'.' as radix character, and does not have a grouping character.  Thus,

               printf("%'.2f", 1234567.89);

results in "1234567.89" in the POSIX locale,  in  "1234567,89"  in  the
nl_NL locale, and in "1.234.567,89" in the da_DK locale.

.SH   	      The conversion specifier
A character that specifies the type of conversion to be  applied.   The
conversion specifiers and their meanings are:

.SH
	d, i
The  int  argument is converted to signed decimal notation.  The precision, if any, gives the minimum number of digits that mustappear; if the converted value requires fewer digits, it is padded on  the  left  with  zeros. The default precision is 1.When 0is printed with an explicit precision 0, the output is empty.

.SH  	  c
If  no l modifier is present, the int argument is converted to an unsigned char, and the resulting character is
written.  If an l modifier is present, the wint_t  (wide  character)  argument  is  converted  to  a  multibyte
sequence  by  a call to the wcrtomb(3) function, with a conversion state starting in the initial state, and the
resulting multibyte string is written.

.SH       	    s
If no l modifier is present: The const char * argument is expected to be a pointer to  an  array  of  character
type (pointer to a string).  Characters from the array are written up to (but not including) a terminating null
byte ('\0'); if a precision is specified, no more than the number specified are written.   If  a  precision  is
given,  no  null  byte  need  be present; if the precision is not specified, or is greater than the size of the
array, the array must contain a terminating null byte.
.PP If an l modifier is present: The const wchar_t * argument is expected to be a pointer to an array of wide char‐
acters.  Wide characters from the array are converted to multibyte characters (each by a call to the wcrtomb(3)
function, with a conversion state starting in the initial state before the first wide  character),  up  to  and
including  a  terminating  null  wide character.  The resulting multibyte characters are written up to (but not
including) the terminating null byte.  If a precision is specified, no more bytes than the number specified are
written,  but  no  partial  multibyte characters are written.  Note that the precision determines the number of
bytes written, not the number of wide characters or screen positions.  The array  must  contain  a  terminating
full wide character, unless a precision is given and it is so small that the number of bytes written exceeds it
before the end of the array is reached.

.SH    	       %     A '%' is written.  No argument is converted.  The complete conversion specification is '%%'.

.SH EXAMPLE


.SH SEE ALSO
       printf(1)
.SH COLOPHON
This page is part of _printf proyect for Holberton School in the process of formation.